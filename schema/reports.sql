-- Schema para la tabla de reportes de zonas
CREATE TABLE public.reports (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    title TEXT NOT NULL,
    description TEXT NOT NULL,
    specific_location TEXT,
    coordinates POINT NOT NULL,  -- Almacena las coordenadas como un punto geográfico
    risk_type TEXT CHECK (risk_type IN ('high', 'medium', 'low')) NOT NULL,
    created_at TIMESTAMP WITH TIME ZONE DEFAULT now(),
    user_id UUID REFERENCES auth.users(id)
);

-- Índice para búsquedas geográficas
CREATE INDEX idx_reports_coordinates ON public.reports USING GIST (coordinates);

-- Políticas de seguridad
ALTER TABLE public.reports ENABLE ROW LEVEL SECURITY;

-- Cualquiera puede ver los reportes
CREATE POLICY "Reports visible para todos" ON public.reports
    FOR SELECT USING (true);

-- Solo el propietario puede eliminar sus reportes
CREATE POLICY "Reports solo eliminables por el propietario" ON public.reports
    FOR DELETE USING (auth.uid() = user_id);

-- Solo usuarios autenticados pueden insertar reportes
CREATE POLICY "Reports insertables por usuarios autenticados" ON public.reports
    FOR INSERT WITH CHECK (auth.uid() IS NOT NULL);

-- Solo usuarios autenticados pueden crear reportes
CREATE POLICY "Usuarios autenticados pueden crear reportes" ON public.reports
    FOR INSERT WITH CHECK (auth.role() = 'authenticated');

-- Solo el autor puede actualizar sus reportes
CREATE POLICY "Solo el autor puede actualizar reportes" ON public.reports
    FOR UPDATE USING (auth.uid() = user_id);

-- Solo el autor puede eliminar sus reportes
CREATE POLICY "Solo el autor puede eliminar reportes" ON public.reports
    FOR DELETE USING (auth.uid() = user_id);

-- Función para obtener los 3 reportes más recientes
CREATE OR REPLACE FUNCTION get_latest_reports(limit_count INTEGER DEFAULT 3)
RETURNS TABLE (
    id BIGINT,
    title TEXT,
    description TEXT,
    specific_location TEXT,
    coordinates POINT,
    risk_type TEXT,
    created_at TIMESTAMP WITH TIME ZONE,
    user_id UUID
) AS $$
BEGIN
    RETURN QUERY
    SELECT 
        r.id,
        r.title,
        r.description,
        r.specific_location,
        r.coordinates,
        r.risk_type,
        r.created_at,
        r.user_id
    FROM 
        public.reports r
    ORDER BY 
        r.created_at DESC
    LIMIT 
        limit_count;
END;
$$ LANGUAGE plpgsql;
