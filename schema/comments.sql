-- Schema para el sistema de comentarios anónimos de Voz Segura

-- Tabla de posts (temas del foro)
CREATE TABLE public.posts (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    title TEXT NOT NULL,
    content TEXT NOT NULL,
    created_at TIMESTAMP WITH TIME ZONE DEFAULT now(),
    user_id UUID REFERENCES auth.users(id)
);

-- Tabla de comentarios anónimos
CREATE TABLE public.comments (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    content TEXT NOT NULL,
    post_id BIGINT NOT NULL REFERENCES public.posts(id) ON DELETE CASCADE,
    parent_id BIGINT REFERENCES public.comments(id) ON DELETE CASCADE,
    likes_count INTEGER DEFAULT 0,
    created_at TIMESTAMP WITH TIME ZONE DEFAULT now(),
    user_id UUID REFERENCES auth.users(id),
    is_anonymous BOOLEAN DEFAULT true,
    anonymous_id TEXT
);

-- Tabla para gestionar los likes de comentarios
CREATE TABLE public.comment_likes (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    comment_id BIGINT NOT NULL REFERENCES public.comments(id) ON DELETE CASCADE,
    user_id UUID NOT NULL REFERENCES auth.users(id),
    created_at TIMESTAMP WITH TIME ZONE DEFAULT now(),
    UNIQUE (comment_id, user_id)
);

-- Índices para mejorar el rendimiento
CREATE INDEX idx_comments_post_id ON public.comments (post_id);
CREATE INDEX idx_comments_parent_id ON public.comments (parent_id);
CREATE INDEX idx_comment_likes_comment_id ON public.comment_likes (comment_id);
CREATE INDEX idx_comment_likes_user_id ON public.comment_likes (user_id);

-- Función para incrementar el contador de likes de un comentario
CREATE OR REPLACE FUNCTION increment_likes(comment_id BIGINT)
RETURNS VOID AS $$
BEGIN
    UPDATE public.comments
    SET likes_count = likes_count + 1
    WHERE id = comment_id;
END;
$$ LANGUAGE plpgsql;

-- Función para decrementar el contador de likes de un comentario
CREATE OR REPLACE FUNCTION decrement_likes(comment_id BIGINT)
RETURNS VOID AS $$
BEGIN
    UPDATE public.comments
    SET likes_count = GREATEST(0, likes_count - 1)
    WHERE id = comment_id;
END;
$$ LANGUAGE plpgsql;

-- Función para obtener todos los comentarios y sus respuestas para un post
CREATE OR REPLACE FUNCTION get_comments_with_replies(post_id_param BIGINT)
RETURNS TABLE (
    id BIGINT,
    content TEXT,
    post_id BIGINT,
    parent_id BIGINT,
    likes_count INTEGER,
    created_at TIMESTAMP WITH TIME ZONE,
    anonymous_id TEXT,
    is_anonymous BOOLEAN,
    replies JSONB
) AS $$
BEGIN
    RETURN QUERY
    SELECT 
        c.id,
        c.content,
        c.post_id,
        c.parent_id,
        c.likes_count,
        c.created_at,
        c.anonymous_id,
        c.is_anonymous,
        COALESCE(
            (
                SELECT jsonb_agg(
                    jsonb_build_object(
                        'id', r.id,
                        'content', r.content,
                        'post_id', r.post_id,
                        'parent_id', r.parent_id,
                        'likes_count', r.likes_count,
                        'created_at', r.created_at,
                        'anonymous_id', r.anonymous_id,
                        'is_anonymous', r.is_anonymous
                    )
                )
                FROM public.comments r
                WHERE r.parent_id = c.id
                ORDER BY r.created_at ASC
            ),
            '[]'::jsonb
        ) AS replies
    FROM 
        public.comments c
    WHERE 
        c.post_id = post_id_param
        AND c.parent_id IS NULL
    ORDER BY 
        c.created_at DESC;
END;
$$ LANGUAGE plpgsql;
