-- Script para inicializar la base de datos con datos predeterminados

-- Primero, asegurarse de que exista la tabla posts
CREATE TABLE IF NOT EXISTS public.posts (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    title TEXT NOT NULL,
    content TEXT NOT NULL,
    created_at TIMESTAMP WITH TIME ZONE DEFAULT now(),
    user_id UUID REFERENCES auth.users(id)
);

-- Insertar un post predeterminado si no existe ninguno
INSERT INTO public.posts (title, content, user_id)
SELECT 
    'Foro general',
    'Espacio para compartir experiencias y apoyarnos mutuamente.',
    auth.uid()
WHERE 
    NOT EXISTS (SELECT 1 FROM public.posts LIMIT 1);

-- Asegurarse de que exista la tabla comments
CREATE TABLE IF NOT EXISTS public.comments (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    content TEXT NOT NULL,
    post_id BIGINT NOT NULL REFERENCES public.posts(id) ON DELETE CASCADE,
    parent_id BIGINT REFERENCES public.comments(id) ON DELETE CASCADE,
    likes_count INTEGER DEFAULT 0,
    created_at TIMESTAMP WITH TIME ZONE DEFAULT now(),
    user_id UUID REFERENCES auth.users(id),
    is_anonymous BOOLEAN DEFAULT true,
    anonymous_id TEXT
);

-- Asegurarse de que exista la tabla comment_likes
CREATE TABLE IF NOT EXISTS public.comment_likes (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    comment_id BIGINT NOT NULL REFERENCES public.comments(id) ON DELETE CASCADE,
    user_id UUID NOT NULL REFERENCES auth.users(id),
    created_at TIMESTAMP WITH TIME ZONE DEFAULT now(),
    UNIQUE (comment_id, user_id)
);

-- Crear o reemplazar la función para incrementar likes
CREATE OR REPLACE FUNCTION increment_likes(comment_id BIGINT)
RETURNS VOID AS $$
BEGIN
    UPDATE public.comments
    SET likes_count = likes_count + 1
    WHERE id = comment_id;
END;
$$ LANGUAGE plpgsql;

-- Crear o reemplazar la función para decrementar likes
CREATE OR REPLACE FUNCTION decrement_likes(comment_id BIGINT)
RETURNS VOID AS $$
BEGIN
    UPDATE public.comments
    SET likes_count = GREATEST(0, likes_count - 1)
    WHERE id = comment_id;
END;
$$ LANGUAGE plpgsql;

-- Configurar permisos para las tablas
ALTER TABLE public.posts ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.comments ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.comment_likes ENABLE ROW LEVEL SECURITY;

-- Crear políticas de seguridad para posts
CREATE POLICY "Post visible para todos" ON public.posts
    FOR SELECT USING (true);

CREATE POLICY "Solo el autor puede actualizar posts" ON public.posts
    FOR UPDATE USING (auth.uid() = user_id);

CREATE POLICY "Solo el autor puede eliminar posts" ON public.posts
    FOR DELETE USING (auth.uid() = user_id);

CREATE POLICY "Usuarios autenticados pueden crear posts" ON public.posts
    FOR INSERT WITH CHECK (auth.role() = 'authenticated');

-- Crear políticas de seguridad para comentarios
CREATE POLICY "Comentario visible para todos" ON public.comments
    FOR SELECT USING (true);

CREATE POLICY "Solo el autor puede actualizar comentarios" ON public.comments
    FOR UPDATE USING (auth.uid() = user_id);

CREATE POLICY "Solo el autor puede eliminar comentarios" ON public.comments
    FOR DELETE USING (auth.uid() = user_id);

CREATE POLICY "Usuarios autenticados pueden crear comentarios" ON public.comments
    FOR INSERT WITH CHECK (auth.role() = 'authenticated');

-- Crear políticas de seguridad para likes
CREATE POLICY "Like visible para todos" ON public.comment_likes
    FOR SELECT USING (true);

CREATE POLICY "Solo el autor puede actualizar likes" ON public.comment_likes
    FOR UPDATE USING (auth.uid() = user_id);

CREATE POLICY "Solo el autor puede eliminar likes" ON public.comment_likes
    FOR DELETE USING (auth.uid() = user_id);

CREATE POLICY "Usuarios autenticados pueden crear likes" ON public.comment_likes
    FOR INSERT WITH CHECK (auth.role() = 'authenticated');

-- Crear índices para mejorar el rendimiento
CREATE INDEX IF NOT EXISTS idx_comments_post_id ON public.comments (post_id);
CREATE INDEX IF NOT EXISTS idx_comments_parent_id ON public.comments (parent_id);
CREATE INDEX IF NOT EXISTS idx_comment_likes_comment_id ON public.comment_likes (comment_id);
CREATE INDEX IF NOT EXISTS idx_comment_likes_user_id ON public.comment_likes (user_id);
